# needs to intall rubystats using the command gem install rubystats

require 'nyaplot'
require 'nyaplot3d'
require 'rubystats'

module GA
  class OneplusOne
    class << self

      def f(x)
        if @function == 1
          x[0] * (Math.exp(-x[0]**2-x[1]**2))
        else
          ((x[0]-2)**2) + ((x[1]-2)**2)
        end
      end

      def initialize(funcion, limit_inf = -2, limit_sup = 2, sigma = 0.5, poblation = 50, generations = 500, dimensions = 2)
        # function needed data

        # function that will be evaluated
        @function = funcion
        # lower limit of the function
        @limit_inf = limit_inf
        # upper limit of the function
        @limit_sup = limit_sup
        # number of dimensions of the function
        @dimensions = dimensions

        # data needed for the GA

        # poblation number
        @sigma = 0.5
        # number of generations that will be made
        @generations = generations
        # succes percent calculator
        @ne = 0
        # increment and decremente contribution modifier of standart distribution
        @c = 0.817
        # succes percent establisher
        @phi = 0
        # 1/5 rule this just to made a single calculation of 1/5 and not calculate every iteration
        @rule = 1/5

        # vector for every individual
        @father = Array.new(@dimensions)

        # son initialition as emply array
        @son = Array.new(@dimensions)


        # pobation initialition
        poblationInit

        1.step(@generations) do |generation|
          # aleatory vector generated by using a random number from the normal distribution
          @r = aleatoryVector
          mutate

          if( f(@sons) < f(@father) )
            @father = @sons.dup
            @ne += 1
          end

          adjustmentStage(generation)
        end
        {best: @father, value:f(@father)}
      end

      def poblationInit
        0.step(@dimensions - 1) do |i|
          @father[i] = @limit_inf + ( (@limit_sup - @limit_inf) * Random.rand(0.0..1.0) )
        end
      end

      def aleatoryVector
        gen = Rubystats::NormalDistribution.new(0,0.5)
        gen.rng(@dimensions)
      end

      def mutate
        @sons = @father.each_with_index.map do |xp, i|
          xp + @r[i]
        end
      end

      def adjustmentStage(i)
        @phi = @ne / i;
        if @phi < @rule
          @sigma *= @c**2
        elsif @phi > @rule
          @sigma /= @c**2;
        end
      end

    end
  end
end

def f(x, y, function)
  if function == 1
    x * (Math.exp(-x**2-y**2))
  else
    ((x-2)**2) + ((y-2)**2)
  end
end

def getDataGraphics(limit_inf, limit_sup, function, steps = 0.5)
  x = []; y = []; z = [];

  limit_inf.step(limit_sup, steps) do |i|
    limit_inf.step(limit_sup, steps) do |j|
      x << i
      y << j
      z << f(i,j, function)
    end
  end

  z.map!{|val| next (val.nan? ? 0 : val)}
  data = [x, y, z]
end

def ploting3D(global_min, limit_inf, limit_sup, function, steps = 0.1)
  res = getDataGraphics(limit_inf, limit_sup, function, steps)
  x = res[0]
  y = res[1]
  z = res[2]
  colors = Nyaplot::Colors.qual(3)
  plot = Nyaplot::Plot3D.new
  plot.add(:wireframe, x, y, z)

  x_min = []; y_min = []; z_min = [];
  x_min << global_min[:best][0]
  y_min << global_min[:best][1]
  z_min << global_min[:f_val]
  name_export = "GA excercise " + function.to_s
  plot.add(:particles, x_min, y_min, z_min).name(name_export).color(colors[2])
  plot.export_html(name_export + ".html")
end

puts "primera funcion f(x, y) = x e^(−x**2−y**2), x, y ∈ [−2, 2]"
a = GA::OneplusOne.initialize(1)
puts "\n"
puts a
puts "\n"
ploting3D(a, -2, 2, 1)
puts "segunda funcion f(x) = sum((xi − 2)^2) de i = 1 hasta d, d = 2"
b = GA::OneplusOne.initialize(2)
puts "\n"
puts b
puts "\n"
ploting3D(b, -2, 2, 2)
